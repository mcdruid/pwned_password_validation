<?php

use Drupal\Core\Form\FormStateInterface;
const HIBP_API_URL = 'https://haveibeenpwned.com/api/v2/pwnedpassword/';

const PWNED_PASSWORD_IGNORE = 0;
const PWNED_PASSWORD_WARN = 1;
const PWNED_PASSWORD_BLOCK = 2;

/**
 * Check a password with an API call to haveibeenpwned.
 *
 * @param string $password
 *   The plain text password.
 *
 * @return boolean
 *   Whether the password was found in the Pwned Passwords repository.
 */
function pwned_password_validation_check_password($password) {
  $hash = hash('sha1', $password);
  $result = Drupal::httpClient()->get(HIBP_API_URL . $hash, ['http_errors' => FALSE]);
  switch ($result->getStatusCode()) {
    case 200;
      $status = true;
      break;
    case 404;
      $status = false;
      break;
    case 429:
      // Rate limit has been exceeded.
      // @todo: Make the behaviour in this situation configurable.
      // Deliberately no break.
    default:
      $status = false;
      break;
  }
  return $status;
}

/**
 * Implements hook_form_FORM_ID_alter() for user_login_form().
 */
function pwned_password_validation_form_user_login_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $config = \Drupal::config('pwned_password_validation.settings');
  if ($config->get('login_policy') == PWNED_PASSWORD_IGNORE) {
    return;
  }
  $form['#validate'][] = 'pwned_password_validation_user_login_form_validate';
}

/**
 * Implements hook_form_FORM_ID_alter() for user_register_form().
 */
function pwned_password_validation_form_user_register_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $config = \Drupal::config('pwned_password_validation.settings');
  if ($config->get('register_policy') == PWNED_PASSWORD_IGNORE) {
    return;
  }
  // Only add password validation if a password is going to be provided at registration.
  $account = \Drupal::currentUser();
  $config = \Drupal::config('user.settings');
  if ($account->isAnonymous() and !$config->get('verify_mail')) {
    $form['#validate'][] = 'pwned_password_validation_user_register_form_validate';
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for user_form().
 */
function pwned_password_validation_form_user_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $config = \Drupal::config('pwned_password_validation.settings');
  if ($config->get('change_policy') == PWNED_PASSWORD_IGNORE) {
    return;
  }
  $form['#validate'][] = 'pwned_password_validation_user_form_validate';
}

/**
 * Validation for user_login_form().
 *
 * @param $form
 * @param FormStateInterface $form_state
 */
function pwned_password_validation_user_login_form_validate($form, FormStateInterface $form_state) {
  $config = \Drupal::config('pwned_password_validation.settings');
  if (!isset($form_state->getUserInput()['pass'])) {
    return;
  }
  if (pwned_password_validation_check_password($form_state->getUserInput()['pass'])) {
    switch ($config->get('login_policy')) {
      case PWNED_PASSWORD_WARN:
        // At validation, the user is not yet authenticated so we can't provide an edit link.
        drupal_set_message(_pwned_password_validation_pwned_password_warning(), 'warning');
        break;
      case PWNED_PASSWORD_BLOCK:
        // Do we really want to be doing this?
        $form_state->setErrorByName('pass', _pwned_password_validation_pwned_password_login_blocked_message());
        break;
    }
  }
}

/**
 * Validation for user_register_form().
 *
 * @param $form
 * @param FormStateInterface $form_state
 */
function pwned_password_validation_user_register_form_validate($form, FormStateInterface $form_state) {
  if (!isset($form_state->getUserInput()['pass'])) {
    return;
  }
  if (!($pass = _pwned_password_validation_extract_one_password($form_state->getUserInput()['pass']))) {
    return;
  }
  if (pwned_password_validation_check_password($pass)) {
    switch ($config->get('register_policy')) {
      case PWNED_PASSWORD_WARN:
        // At validation, the user is not yet authenticated so we can't provide an edit link.
        drupal_set_message(_pwned_password_validation_pwned_password_warning(), 'warning');
        break;
      case PWNED_PASSWORD_BLOCK:
        $form_state->setErrorByName('pass', _pwned_password_validation_pwned_password_register_blocked_message());
        break;
    }
  }
}

/**
 * Validation for user_form().
 *
 * @param $form
 * @param FormStateInterface $form_state
 */
function pwned_password_validation_user_form_validate($form, FormStateInterface $form_state) {
  if (!isset($form_state->getUserInput()['pass'])) {
    return;
  }
  if (!($pass = _pwned_password_validation_extract_one_password($form_state->getUserInput()['pass']))) {
    return;
  }
  if (pwned_password_validation_check_password($pass)) {
    switch ($config->get('change_policy')) {
      case PWNED_PASSWORD_WARN:
        // At validation, the user is not yet authenticated so we can't provide an edit link.
        drupal_set_message(_pwned_password_validation_pwned_password_warning(), 'warning');
        break;
      case PWNED_PASSWORD_BLOCK:
        $form_state->setErrorByName('pass', _pwned_password_validation_pwned_password_change_blocked_message());
        break;
    }
  }
}

/**
 * Extract individual password from pair of password confirmation inputs.
 *
 * @param array $passwords
 *
 * @return string OR boolean false if passwords did not match.
 */
function _pwned_password_validation_extract_one_password($passwords) {
  if (!is_array($passwords)) {
    return $passwords;
  }
  if (count(($password = array_unique($passwords))) > 1) {
    // Passwords didn't match.
    return false;
  }
  else {
    return array_pop($password);
  }
}

/**
 * Generic warning about pwned password.
 *
 * @return string
 */
function _pwned_password_validation_pwned_password_warning() {
  return t(<<<EOM
The password you have supplied previously appeared in a data breach of another 
site. <strong>This is not related to a security incident on this site</strong>, 
however the fact that it has previously appeared elsewhere puts your account at 
risk. You should consider changing your password on this site as well as on any 
other site you may have used it.
EOM
  );
}

/**
 * Error message when a login has been blocked.
 *
 * @return string
 */
function _pwned_password_validation_pwned_password_login_blocked_message() {
  // @todo: provide a placeholder for a link to the password reset form
  return t(<<<EOM
The password you have supplied previously appeared in a data breach of another 
site. <strong>This is not related to a security incident on this site</strong>, 
however the fact that it has previously appeared elsewhere puts your account at 
risk. You need to reset your password to something else.
EOM
  );
}

/**
 * Error message when registration has been blocked.
 *
 * @return string
 */
function _pwned_password_validation_pwned_password_register_blocked_message() {
  return t(<<<EOM
The password you have supplied previously appeared in a data breach of another 
site. <strong>This is not related to a security incident on this site</strong>, 
however the fact that it has previously appeared elsewhere puts your account at 
risk. You need to choose a different password for your account.
EOM
  );
}

/**
 * Error message when a password change has been blocked.
 *
 * @return string
 */
function _pwned_password_validation_pwned_password_change_blocked_message() {
  return t(<<<EOM
The new password you have supplied previously appeared in a data breach of 
another site. <strong>This is not related to a security incident on this 
site</strong>, however the fact that it has previously appeared elsewhere puts 
your account at risk. You need to change your password to something else.
EOM
  );
}